generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model departments {
  id                String   @id @default(uuid())
  name              String?  @db.VarChar(190)
  head_user_id      String?  @db.VarChar(190)
  created_at        DateTime @default(now()) @db.DateTime(6)
  updated_at        DateTime @updatedAt @db.DateTime(6)
  head_user         users?   @relation("department_head_user_idTouser", fields: [head_user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_HEAD_USER_DEPARTMENT")
  users_departments users[]  @relation("users_departmentTodepartments")

  @@index([head_user_id], map: "fk_dep_headuser_idx")
}

model notifications {
  id          String              @id @default(uuid())
  title       String?             @db.VarChar(255)
  description String?             @db.VarChar(255)
  deadline    DateTime?           @db.DateTime(0)
  type        notifications_type?
  created_at  DateTime            @default(now()) @db.DateTime(6)
  updated_at  DateTime            @updatedAt @db.DateTime(6)
  event_id    String?             @db.VarChar(190)
  task_id     String?             @db.VarChar(190)
  activity_id String?             @db.VarChar(190)
  user_id     String?             @db.VarChar(190)
  activities  activities?         @relation(fields: [activity_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_ACTIVITY_NOTIFICATION")
  events      events?             @relation(fields: [event_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_EVENT_NOTIFICATION")
  tasks       tasks?              @relation(fields: [task_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_TASK_NOTIFICATION")
  users       users?              @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_USER_NOTIFICATION")

  @@index([event_id], map: "fk_event_id_idx")
  @@index([activity_id], map: "fk_notact_idx")
  @@index([task_id], map: "fk_nottask_idx")
  @@index([user_id], map: "fk_notuser_idx")
}

model users {
  id              String            @id @default(uuid())
  name            String?           @db.VarChar(190)
  phone_number    String?           @db.VarChar(20)
  email           String?           @unique(map: "email") @db.VarChar(255)
  vk_link         String?           @db.VarChar(255)
  tg_link         String?           @db.VarChar(255)
  avatar_path     String?           @db.VarChar(255)
  role            users_role?       @default(old)
  password        String?           @db.VarChar(255)
  created_at      DateTime          @default(now()) @db.DateTime(6)
  updated_at      DateTime          @updatedAt @db.DateTime(6)
  department_id   String?           @db.VarChar(190)
  activities      activities[]
  activity_users  activity_users[]
  department      departments?      @relation("users_departmentTodepartments", fields: [department_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_USER_DEPARTMENT")
  events_managers events_managers[]
  events_users    events_users[]
  files           files[]
  notifications   notifications[]
  tasks           tasks[]

  head_of_department departments[] @relation("department_head_user_idTouser")

  @@index([department_id], map: "department_id_idx")
}

model locations {
  id               String             @id @default(uuid())
  name             String?            @db.VarChar(255)
  description      String?            @db.VarChar(255)
  address          String?            @db.VarChar(255)
  created_at       DateTime           @default(now()) @db.DateTime(6)
  updated_at       DateTime           @updatedAt @db.DateTime(6)
  activities       activities[]
  events_locations events_locations[]
}

model activities {
  id                 String           @id @default(uuid())
  name               String?          @db.VarChar(255)
  description        String?          @db.VarChar(255)
  is_completed       Boolean?         @default(false)
  date               DateTime?        @db.DateTime(0)
  created_at         DateTime         @default(now()) @db.DateTime(6)
  updated_at         DateTime         @updatedAt @db.DateTime(6)
  location_id        String?          @db.VarChar(190)
  created_by_user_id String?          @db.VarChar(190)
  created_by_user    users?           @relation(fields: [created_by_user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_ACTIVITY_CREATED_BY_USER")
  location           locations?       @relation(fields: [location_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_ACTIVITY_LOCATION")
  users              activity_users[]
  notifications      notifications[]

  @@index([created_by_user_id], map: "FK_ACTIVITY_CREATED_BY_USER")
  @@index([location_id], map: "FK_ACTIVITY_LOCATION")
}

model events {
  id            String             @id @default(uuid())
  name          String?            @db.VarChar(190)
  description   String?            @db.VarChar(255)
  date          DateTime?          @db.DateTime(0)
  is_archived   Boolean?           @default(false)
  created_at    DateTime           @default(now()) @db.DateTime(6)
  updated_at    DateTime           @updatedAt @db.DateTime(6)
  past_event_id String?            @db.VarChar(190)
  theme_id      String?            @db.VarChar(190)
  theme         themes?            @relation(fields: [theme_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_EVENT_THEME")
  events        events?            @relation("eventsToevents", fields: [past_event_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_PREVIOUS_EVENT")
  other_events  events[]           @relation("eventsToevents")
  locations     events_locations[]
  managers      events_managers[]
  users         events_users[]
  files         files[]
  notifications notifications[]
  tasks         tasks[]

  @@index([past_event_id], map: "fk_past_event_id_idx")
  @@index([theme_id], map: "fk_theme_id_idx")
}

model events_locations {
  id          String     @id @default(uuid())
  event_id    String?    @db.VarChar(190)
  location_id String?    @db.VarChar(190)
  events      events?    @relation(fields: [event_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_EVENT_LOCATION")
  locations   locations? @relation(fields: [location_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_LOCATION_EVENT")

  @@index([event_id], map: "fk_evloc_idx")
  @@index([location_id], map: "fk_locev_idx")
}

model events_managers {
  id       String  @id @default(uuid())
  event_id String? @db.VarChar(190)
  user_id  String? @db.VarChar(190)
  events   events? @relation(fields: [event_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_EVENT_MANAGER")
  users    users?  @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_MANAGER_EVENT")

  @@index([event_id], map: "fk_evman_idx")
  @@index([user_id], map: "fk_manev_idx")
}

model events_users {
  id       String  @id @default(uuid())
  event_id String? @db.VarChar(190)
  user_id  String? @db.VarChar(190)
  events   events? @relation(fields: [event_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_EVENT_USER_CONNECTION")
  users    users?  @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_USER_EVENT_CONNECTION")

  @@index([event_id], map: "fk_evuser_idx")
  @@index([user_id], map: "fk_userev_idx")
}

model activity_users {
  id          String      @id @default(uuid())
  activity_id String?     @db.VarChar(190)
  user_id     String?     @db.VarChar(190)
  activities  activities? @relation(fields: [activity_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_activuser")
  users       users?      @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "fk_useractiv")

  @@index([activity_id], map: "FK_ACTIVITY_USER_CONNECTION")
  @@index([user_id], map: "FK_USER_ACTIVITY_CONNECTION")
}

model files {
  id                 String    @id @default(uuid())
  name               String?   @db.VarChar(190)
  path               String?   @db.VarChar(250)
  size               Int?
  date               DateTime? @db.DateTime(0)
  created_at         DateTime  @default(now()) @db.DateTime(6)
  updated_at         DateTime  @updatedAt @db.DateTime(6)
  created_by_user_id String?   @db.VarChar(190)
  event_id           String?   @db.VarChar(190)
  events             events?   @relation(fields: [event_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_EVENT_FILE")
  users              users?    @relation(fields: [created_by_user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_FILE_CREATED_BY_USER")

  @@index([created_by_user_id], map: "fk_created_by_user_id_idx")
  @@index([event_id], map: "fk_event_id_idx")
  @@index([event_id], map: "fk_eventfile_id_idx")
  @@index([created_by_user_id], map: "fk_user_id_idx")
}

model tasks {
  id            String          @id @default(uuid())
  name          String?         @db.VarChar(255)
  priority      Int?            @default(3) @db.TinyInt
  description   String?         @db.VarChar(255)
  deadline      DateTime?       @db.DateTime(0)
  status        tasks_status?   @default(open)
  created_at    DateTime        @default(now()) @db.DateTime(6)
  updated_at    DateTime        @updatedAt @db.DateTime(6)
  event_id      String?         @db.VarChar(190)
  user_id       String?         @db.VarChar(190)
  notifications notifications[]
  event         events?         @relation(fields: [event_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_EVENT_TASK")
  user          users?          @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_USER_TASK")

  @@index([event_id], map: "FK_EVENT_TASK")
  @@index([user_id], map: "FK_USER_TASK")
}

model themes {
  id         String   @id @default(uuid())
  name       String?  @db.VarChar(255)
  created_at DateTime @default(now()) @db.DateTime(6)
  updated_at DateTime @updatedAt @db.DateTime(6)
  events     events[]
}

enum users_role {
  admin
  member
  old
}

enum notifications_type {
  deadline
  event
  activity
  task
}

enum tasks_status {
  open
  at_work
  review
  closed
}
